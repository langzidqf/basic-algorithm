//最初版本的冒泡排序和被改良的冒泡排序

#include<stdio.h>
#include<Windows.h>
void bubble1(int * a, int num);
void bubble2(int * a, int num);

int main(void)
{
	int a1[10] = { 1,4,3,2,9,8,0,5,7,6 };
	int a2[10] = { 1,4,3,2,9,8,0,5,7,6 };
	bubble1(a1, 10);
	for (int i = 0; i < 10; i++)
		printf("%d、", a1[i]);
	printf("\n");
	bubble2(a2, 10);
	for (int i = 0; i < 10; i++)
		printf("%d、", a2[i]);
	system("pause");
	return 0;
}


//比较容易理解冒泡排序的一种方式是，将其不断在角逐得到的最大的值
//但是，使用这个方式很难对其进行优化、因为可以说是一种比较笨拙的选择排序
void bubble1(int * a, int num)
{
	for (int i = 0; i < num; i++)
	{
		//每次对num - i个数进行比较，得到其中最大的数
		//每次进行num - i - 1次的比较
		for (int j = 0; j < num - i - 1; j++)
		{
			if (a[j] > a[j + 1])
			{
				int tmp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = tmp;
			}
		}
	}
	return;
}

//在改进的算法中，要将其看成在进行有序的序列段的排序
//例如：1，3，4，9，5
//其中的例子就是存在一个有序段：1，3，4，9
//在第一次的排序中，记录1，3，4，9都已经有序了，然后发现9，5存在无序，记录9的rank（3），
//第二步将直接从 数组的rank（2）和rank（3）进行比较，直接发现有序，则将rank++，然后进一步排序
//再举第二个例子
//1，3，4，5，9，2，3，4，5，
//其中存在两个有序段，此时寻找从rank = 0 开始的最小的有序段
//最后可以比较快捷的完成排序
//	int a1[10] = { 1,4,3,2,9,8,0,5,7,6 };
// 1,3,2,4,8,0,5,7,6,9
// 1,2,3,4,0,5,7,6,8,9

//最后总结一下改进版的冒泡排序，
//其中外循环进行 num 次，意义为依次寻找最大的元素
//改进了内循环，传统冒泡排序采用了每次都从j = 0开始循环
//而改进版冒泡排序则使用了减少有序段的比较

void bubble2(int * a, int num)
{
	int i = 0;
	int j = 0;
	int rank = 0;
	while (i < num)
	{
		//其中的num - i - 1表示已经有 i + 1 个元素的
		//在这个循环中， 得到rank值表示已经从rank = 0 到最大的顺序值
		while (j < num - i - 1)
		{
			if (a[j] <= a[j + 1])
			{
				if (rank == j)	rank++;
				j++;
			}
			else
			{
				int tmp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = tmp;
				j++;
			}
		}
		j = (rank - 1) < 0 ? 0 : rank - 1;
		rank = j;
		i++;
	}
	return;
}
